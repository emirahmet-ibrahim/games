# Compute all isolated mixed-action Nash equilibria
using GameTheory

share(i::Int, j::Int) = (i == j) ? 0.5 : 1.0;
function share(i::Int, j::Int, k::Int)
    if i == j
        return (i == k) ? [1/3, 1/3, 1/3] : [1/2, 1/2, 1];
    elseif j == k
        return [1, 1/2, 1/2];
    elseif i == k
        return [1/2, 1, 1/2];
    else
        return [1, 1, 1];
    end
end

function NE(A::Vector{Int}, m::Int)
# A is the set of actions, m is the number of players
    n = length(A);
    if m == 2
        g = NormalFormGame((n, n));
        for i = 1:n
            for j = 1:n
                g[i,j] = [A[i], A[j]] * share(i,j);
            end
        end
    elseif m == 3
        g = NormalFormGame((n, n, n));
        for i = 1:n
            for j = 1:n
                for k = 1:n
                    g[i,j,k] = [A[i], A[j], A[k]] .* share(i,j,k);
                end
            end
        end
    end
    println(g);
    return hc_solve(g, show_progress=false);
end

## Game 1: 18-12
nash = NE([18, 12], 2)
# ([0, 1], [1, 0])
# ([1, 0], [0, 1])
# ([4/5, 1/5], [4/5, 1/5])

## Game 2: 18-12-12
nash = NE([18, 12, 12], 2)
# ([2/3, 1/3, 0], [2/3, 0, 1/3])
# ([2/3, 0, 1/3], [2/3, 1/3, 0])
# ([3/4, 1/8, 1/8], [3/4, 1/8, 1/8])

## Game 3: 18-12-12-12
nash = NE([18, 12, 12, 12], 2)
# ([8/11, 1/11, 1/11, 1/11], [8/11, 1/11, 1/11, 1/11])

## Game 4: 18-12-12-12-12
nash = NE([18, 12, 12, 12, 12], 2)
# ([5/7, 1/14, 1/14, 1/14, 1/14], [5/7, 1/14, 1/14, 1/14, 1/14])

## Game 5: 18-10
nash = NE([18, 10], 2)
# ([0, 1], [1, 0])
# ([1, 0], [0, 1])
# ([13/14, 1/14], [13/14, 1/14])

## Game 6: 18-10-10
nash = NE([18, 10, 10], 2)
# ([8/9, 1/9, 0], [8/9, 0, 1/9])
# ([8/9, 0, 1/9], [8/9, 1/9, 0])
# ([21/23, 1/23, 1/23], [21/23, 1/23, 1/23])

## Game 7: 18-10-10-10-10
nash = NE([18, 10, 10, 10, 10], 2)
# ([37/41, 1/41, 1/41, 1/41, 1/41], [37/41, 1/41, 1/41, 1/41, 1/41])

## Game 8: 18-14
nash = NE([18, 14], 2)
# ([0, 1], [1, 0])
# ([1, 0], [0, 1])
# ([11/16, 5/16], [11/16, 5/16])

## Game 9: 18-14-14
nash = NE([18, 14, 14], 2)
# ([4/9, 0, 5/9], [4/9, 5/9, 0])
# ([4/9, 5/9, 0], [4/9, 0, 5/9])
# ([3/5, 1/5, 1/5], [3/5, 1/5, 1/5])

## Game 10: 18-14-14-14-14
nash = NE([18, 14, 14, 14, 14], 2)
# ([23/43, 5/43, 5/43, 5/43, 5/43], [23/43, 5/43, 5/43, 5/43, 5/43])

## Game 1: 18-12-6
nash = NE([18, 12, 6], 3)
# [(11-sqrt(93))/2, (sqrt(93)-9)/2, 0]

## Game 2: 18-12-9
nash = NE([18, 12, 9], 3)
# [0.6623006439107122, 0.3051735202178473, 0.03252583587144042]

## Game 3: 18-12-12
nash = NE([18, 12, 12], 3)
# [0.5751923190728080, 0.21240384046359606, 0.21240384046359603]

## Game 4: 18-12-12-12
nash = NE([18, 12, 12, 12], 3)
# [0.5252272915132479, 0.15825756949558412, 0.15825756949558403, 0.15825756949558403]

## Game 5: 18-12-12-12-12
nash = NE([18, 12, 12, 12, 12], 3)
# See models.jl

## Game 6: 18-12-12-12-12-12
nash = NE([18, 12, 12, 12, 12, 12], 3)
# See models.jl

## Game 7: 18-12-9-9
nash = NE([18, 12, 9, 9], 3)
# [0.6548058664811154, 0.2972823752010171, 0.02395587915893377]

## Game 8: 18-12-9-9-9
nash = NE([18, 12, 9, 9, 9], 3)
# [0.6504450939150307, 0.29268259861809326, 0.01895743582229202]

## Game 9: 18-12-12-9-9
nash = NE([18, 12, 12, 9, 9], 3)
# [0.5751923190728080, 0.21240384046359606, 0.21240384046359603, 0, 0]

## Game 10: 18-12-12-9
nash = NE([18, 12, 12, 9], 3)
# [0.5751923190728080, 0.21240384046359606, 0.21240384046359603, 0]

## 3-player games of the form: 18 - 12(α times) - 9(β times)
(α, β) = (1, 3);
F(p) = [2α^2*p[1]^2 + (2β^2-1)*p[2]^2 + 4α*β*p[1]*p[2] + 2α*p[1] + (2β+3)*p[2] - 1;
        4p[1]^2 - 3p[2]^2 - 12p[1] + 9p[2] + 3];

DF(p) = [(4α^2*p[1] + 4α*β*p[2] + 2α)  (2(2β^2-1)*p[2] + 4α*β*p[1] + 2β + 3);
         (8p[1] - 12)                  (9 - 6p[2])];

(p2, p3) = Newton(F, DF, [0.2, 0.02]; ϵ=1e-12, maxiter=5000);
p1 = 1 - α*p2 - β*p3
p = [p1, p2, p3];

# Sanity check
u(p) = [6(p[1]^2 - 3p[1] + 3);
        4(p[2]^2 - 3p[2] + 3);
        3(p[3]^2 - 3p[3] + 3)];
print(u(p))
